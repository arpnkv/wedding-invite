// –ê–Ω–∏–º–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Intersection Observer
const sections = document.querySelectorAll('.section');

const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.classList.add('visible');
        }
    });
}, { threshold: 0.5 });

sections.forEach(section => observer.observe(section));

// –¢–∞–π–º–µ—Ä –¥–æ —Å–≤–∞–¥—å–±—ã
const weddingDate = new Date("2025-09-06T00:00:00").getTime();

function updateCountdown() {
    const now = new Date().getTime();
    const distance = weddingDate - now;

    const days = Math.floor(distance / (1000 * 60 * 60 * 24));
    const hours = Math.floor(
        (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)
    );
    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((distance % (1000 * 60)) / 1000);

    document.getElementById("days").textContent = String(days).padStart(2, "0");
    document.getElementById("hours").textContent = String(hours).padStart(2, "0");
    document.getElementById("minutes").textContent = String(minutes).padStart(2, "0");
    document.getElementById("seconds").textContent = String(seconds).padStart(2, "0");
}

setInterval(updateCountdown, 1000);
updateCountdown();

// –õ–æ–∫–∞—Ü–∏—è
const mapContainer = document.querySelector('.map-container');

mapContainer.addEventListener('mouseenter', () => {
    mapContainer.classList.add('active');
});

mapContainer.addEventListener('mouseleave', () => {
    mapContainer.classList.remove('active');
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –≤ Telegram
    const BOT_TOKEN = 'AAG9IPJvwenee1iaQhn0cFHFB99jeVvdWkI';
    const CHAT_ID = '-1002326818571';
    const API_URL = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;

    document.getElementById('rsvpForm').addEventListener('submit', async function (e) {
    e.preventDefault();

    const form = e.target;
    const data = new FormData(form);

    const attendance = data.get('attendance') || '–ù–µ —É–∫–∞–∑–∞–Ω';
    const name = data.get('name') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    const drinks = data.getAll('drinks').join(', ') || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ';
    const food = data.getAll('food').join(', ') || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ';
    const comments = data.get('comments') || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤';

    const message = `
<b>üì© –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ</b>\n
üë§ <b>–ò–º—è:</b> ${name}
üéâ <b>–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ:</b> ${attendance}
üç∑ <b>–ù–∞–ø–∏—Ç–∫–∏:</b> ${drinks}
üçΩÔ∏è <b>–ï–¥–∞:</b> ${food}
üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${comments}
    `.trim();

    try {
    const response = await fetch(API_URL, {
    method: 'POST',
    headers: {
    'Content-Type': 'application/json'
},
    body: JSON.stringify({
    chat_id: CHAT_ID,
    text: message,
    parse_mode: 'HTML'
})
});

    if (response.ok) {
    alert('–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚ù§Ô∏è');
    form.reset();
} else {
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
}
} catch (error) {
    alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API');
    console.error(error);
}
});
